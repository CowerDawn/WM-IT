#!/bin/bash

WORKSPACES=("1" "2" "3" "4" "5" "6" "7" "8" "9")
CURRENT_WORKSPACE="1"
PROGRAMS=()  
WALLPAPER="WM-IT" 
COLORS=("40" "43" "44" "46" "42" "46")  
CURRENT_COLOR_INDEX=2 # fedor uberite paragenerator
function draw_wallpaper() {
    clear
    echo -e "\e[${COLORS[$CURRENT_COLOR_INDEX]}m\e[37m"
    echo "┌─────────────────────────────────────────────────────────────────────────────┐"
    echo "│                                                                             │"
    echo "│  _    _   _____   __  Welcome to WM-IT!                                     │"
    echo "│ | |  | | |_   _| |  | Thank you for downloading WM-IT                       │"
    echo "│ | |__| |   | |   |  | WM-IT github:                                         │"
    echo "│ |  __  |   | |   |__| https://github.com/CowerDawn/WM-IT                    │"
    echo "│ | |  | |  _| |_   __  Creater: CowerDawn,S0siskaKiller                      │"
    echo "│ |_|  |_| |_____| |__| WM-IT - This is a Window manager inside the terminal! │"
    echo "│                                                                             │"
    echo "│                                                                             │"
    echo "└─────────────────────────────────────────────────────────────────────────────┘"
    echo -e "\e[0m"   
}

function draw_menu() {
    echo -e "\e[40m\e[37m"
    echo -e "┌────────────────────────────────────────────────────────────────────┐"
    echo -e "│ Workspace: $CURRENT_WORKSPACE | Time: $(date +'%H:%M:%S') | Press H to help                    │"
    echo -e "└────────────────────────────────────────────────────────────────────┘\e[0m"
}

function switch_workspace() {
    CURRENT_WORKSPACE=$1
    draw_wallpaper
    draw_menu
}

function open_program() {
    PROGRAM=$1
    PROGRAMS+=("$PROGRAM")
    draw_wallpaper
    draw_menu
    echo "Opening $PROGRAM..."
    $PROGRAM &
}

function close_program() {
    PROGRAM=$1
    for i in "${!PROGRAMS[@]}"; do
        if [[ "${PROGRAMS[$i]}" == "$PROGRAM" ]]; then
            unset 'PROGRAMS[$i]'
            pkill -f "$PROGRAM"
            draw_wallpaper
            draw_menu
            echo "Closed $PROGRAM."
            return
        fi
    done
    echo "Program $PROGRAM not found."
}

function detect_package_manager() {
    if [ -f /etc/debian_version ]; then
        echo "apt"
    elif [ -f /etc/arch-release ]; then
        echo "pacman"
    elif [ -f /etc/fedora-release ]; then
        echo "dnf"
    elif [ -f /etc/redhat-release ]; then
        echo "yum"
    elif [ -f /etc/SuSE-release ]; then
        echo "zypper"
    elif [ -f /etc/gentoo-release ];then
	    echo "portage"
    elif [ -f /etc/void-release ];then
	    echo "xbps"
    elif [ "$(uname)" = "FreeBSD" ];then
	    echo "pkg"
    elif [ "$(uname)" = "OpenBSD" ];then
	    echo "pkg_info"
    elif [ "$(uname)" = "NetBSD" ];then
	    echo "pkgin"
    else
        echo "unknown"
    fi
}

function install_package() {
    PACKAGE=$1
    PM=$(detect_package_manager)
    case $PM in
        "apt")
            echo "Installing $PACKAGE using apt..."
            sudo apt install -y $PACKAGE
            ;;
        "pacman")
            echo "Installing $PACKAGE using pacman..."
            sudo pacman -S --noconfirm $PACKAGE
            ;;
        "dnf")
            echo "Installing $PACKAGE using dnf..."
            sudo dnf install -y $PACKAGE
            ;;
        "yum")
            echo "Installing $PACKAGE using yum..."
            sudo yum install -y $PACKAGE
            ;;
        "zypper")
            echo "Installing $PACKAGE using zypper..."
            sudo zypper install -y $PACKAGE
            ;;
    "portage")
	    echo "Installing $PACKAGE using portage..."
	   sudo emerge --ask $PACKAGE
	    ;;
    "xbps")
           echo "Installing $PACKAGE using xbps-install..."
	   xbps-install $PACKAGE
	    ;;
    "pkg_info")
	    echo "Installing $PACKAGE using pkg_add..."
            doas pkg_add $PACKAGE
    ;;
    "pkgin")
	    echo "Installing $PACKAGE using pkgin..."
            doas pkgin install $PACKAGE
	    ;;
       "pkg")
	       echo "Installing $PACKAGE using pkg..."
	       sudo pkg install $PACKAGE
	         ;;
        *)
            echo "Unsupported package manager. Cannot install $PACKAGE."
            ;;
    esac
}



function remove_package() {
    PACKAGE=$1
    PM=$(detect_package_manager)
    case $PM in
        "apt")
            echo "Removing $PACKAGE using apt..."
            sudo apt remove -y $PACKAGE
            ;;
        "pacman")
            echo "Removing $PACKAGE using pacman..."
            sudo pacman -Rcs --noconfirm $PACKAGE
            ;;
        "dnf")
            echo "Removing $PACKAGE using dnf..."
            sudo dnf remove -y $PACKAGE
            ;;
        "yum")
            echo "Removing $PACKAGE using yum..."
            sudo yum remove -y $PACKAGE
            ;;
        "zypper")
            echo "Removing $PACKAGE using zypper..."
            sudo zypper remove -y $PACKAGE
            ;;
    "portage")
	    echo "Removing $PACKAGE using portage..."
	   sudo emerge --unemerge $PACKAGE
	    ;;
	    "xbps")
		    echo "Removing $PACKAGE using xbps-remove"
		    xbps-remove -Rf $PACKAGE
	    ;;
       "pkg")
	       echo "Removing $PACKAGE using pkg..."
	       sudo pkg delete $PACKAGE
	       ;;
       "pkg_info")
	       echo "Removing $PACKAGE using pkg_delete..."
               doas pkg_delete $PACKAGE
                 ;;
	       "pkgin")
		       echo "Removing $PACKAGE using pkgin..."
	       doas pkgin remove $PACKAGE
	       ;;
        *)
            echo "Unsupported package manager. Cannot remove $PACKAGE."
            ;;
    esac
}

function show_help() {
    echo "WM-IT Help:"
    echo "1-9: Switch workspace"
    echo "e: open WM-IT shell"
    echo "d: Open program"
    echo "q: Close program"
    echo "Enter: Open command line"
    echo "-: Shutdown PC"
    echo "b: Reboot PC"
    echo "n: Network management"
    echo "p: Show running processes"
    echo "t: Show system info"
    echo "a: Audio management"
    echo "g: Search package"
    echo "i: Install package"
    echo "r: Remove package"
    echo "c - clear the screen"
    echo "y - clear the system"
    echo "h: Show this help"
    echo "x: Update WM-IT"
}

function open_command_line() {
    draw_wallpaper
    draw_menu
    echo "Enter command:"
    read -r COMMAND
    eval "$COMMAND"
}

function shutdown_pc() {
    echo "Shutdown PC? (Y/N)"
    read -rsn1 response
    if [[ $response == "Y" || $response == "y" ]]; then
        sudo shutdown now
    else
        echo "Shutdown canceled."
    fi
}

function reboot_pc() {
    echo "Reboot PC? (Y/N)"
    read -rsn1 response
    if [[ $response == "Y" || $response == "y" ]]; then
        sudo reboot
    else
        echo "Reboot canceled."
    fi
}

function shell() {
	while true; do
	read -p " > " SHELL
	eval "$SHELL"
    	if [[ "$SHELL" == "exitshell" ]]; then
        echo "exit from shell"
        draw_wallpaper
	draw_menu
	break
	fi
done
}

function show_processes() {
    draw_menu
    echo "Running processes:"
    ps aux | head -n 10
}

function show_system_info() {
    draw_menu
    echo "System Info:"
    echo "CPU Usage: $(top -bn1 | grep "Cpu(s)" | sed "s/.*, *\([0-9.]*\)%* id.*/\1/" | awk '{print 100 - $1"%"}')"
    echo "Memory Usage: $(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')"
    echo "Disk Usage: $(df -h / | awk '{print $5}' | tail -n 1)"
}

function clear_system() {
	PM=$(detect_package_manager) 
	read -p "You really want to start a cleaning up the system? [y/N] " cleaning
        if [ $cleaning = "y" ];then
       case $PM in
		"apt")
			echo "Cleaning the system using apt..."
			sudo apt autoremove
			echo "Done."
			;;
		"pacman")
			echo "Cleaning the system using pacman..."
                        sudo pacman -Scc
			echo "Cache cleared."
			sleep 1
			read -p "Do you want to remove the debug packages? [Y/n]" clearing
			if [ $clearing =  "y" ];then
			sudo pacman -Qtdq | grep debug | sudo pacman -Rcs -
			echo "Done."
			fi
			pacman -Qtdq 
			echo "This is a list of unused packages on your system"
			sleep 2
			echo "The system has been cleaned."
			;;
		"dnf")
			echo "Cleaning the system using dnf..."
			sudo dnf clean all
			sudo dnf autoremove
			echo "Done."
			;;
		"yum")
			echo "Cleaning the system using yum..."
			sudo yum clean all
			sudo yum autoremove
			echo "Done."
			;;
		"zypper")
		         echo "Cleaning the system using zypper..."
			 sudo zypper cc -a
			 echo "Done."
			;;
		"portage")
			echo "Cleaning the system using portage..."
			eclean distfiles
			eclean packages
			eclean binaries
			echo "Done."
			;;
		"xbps")
                     echo "Cleaning the system using xbps..."
		     xbps-remove -0o
		     echo "Done."
			;;
		"pkg")
		echo "Cleaning the system using pkg..."
                sudo pkg autoremove
			;;
		"pkgin")
			echo "Cleaning the system using pkgin..."
		doas pkgin autoremove
		echo "Done."
		;;
	*) 
		echo "unsupported package manager"
esac
else 
	echo "Okay."
	sleep 2
	clear
	draw_wallpaper
	fi 
}


function network_manager() {
    draw_menu
    echo "Network Manager:"
    echo "1. List network interfaces"
    echo "2. Enable network interface"
    echo "3. Disable network interface"
    echo "4. Set static IP address"
    echo "5. Set DHCP"
    echo "6. Exit"
    read -rsn1 choice
    case $choice in
        1)
            echo "Network interfaces:"
            ip link show
            ;;
        2)
            echo "Enter interface name to enable:"
            read INTERFACE
            sudo ip link set $INTERFACE up
            echo "Interface $INTERFACE enabled."
            ;;
        3)
            echo "Enter interface name to disable:"
            read INTERFACE
            sudo ip link set $INTERFACE down
            echo "Interface $INTERFACE disabled."
            ;;
        4)
            echo "Enter interface name:"
            read INTERFACE
            echo "Enter IP address:"
            read IP
            echo "Enter subnet mask (e.g., 24):"
            read MASK
            sudo ip addr add $IP/$MASK dev $INTERFACE
            echo "Static IP set for $INTERFACE."
            ;;
        5)
            echo "Enter interface name:"
            read INTERFACE
            sudo dhclient $INTERFACE
            echo "DHCP set for $INTERFACE."
            ;;
        6)
            echo "Exiting network manager."
            ;;
        *)
            echo "Invalid choice."
            ;;
    esac
}

function audio_manager() {
    draw_menu
    echo "Audio Manager:"
    echo "1. Increase volume"
    echo "2. Decrease volume"
    echo "3. Mute/Unmute"
    echo "4. List audio devices"
    echo "5. Set default audio device"
    echo "6. Exit"
    read -rsn1 choice
    case $choice in
        1)
            amixer set Master 5%+
            echo "Volume increased."
            ;;
        2)
            amixer set Master 5%-
            echo "Volume decreased."
            ;;
        3)
            amixer set Master toggle
            echo "Mute toggled."
            ;;
        4)
            echo "Audio devices:"
            aplay -l
            ;;
        5)
            echo "Enter device name to set as default:"
            read DEVICE
            pactl set-default-sink $DEVICE
            echo "Default audio device set to $DEVICE."
            ;;
        6)
            echo "Exiting audio manager."
            ;;
        *)
            echo "Invalid choice."
            ;;
    esac
}
#I HATE PUMBA
function search_package() {
    echo "Enter package name to search:"
    read PACKAGE
    PM=$(detect_package_manager)
    case $PM in
        "apt")
            echo "Searching for $PACKAGE using apt..."
            apt-cache search $PACKAGE
            ;;
        "pacman")
            echo "Searching for $PACKAGE using pacman..."
            pacman -Ss $PACKAGE
            ;;
        "dnf")
            echo "Searching for $PACKAGE using dnf..."
            dnf search $PACKAGE
            ;;
        "yum")
            echo "Searching for $PACKAGE using yum..."
            yum search $PACKAGE
            ;;
        "zypper")
            echo "Searching for $PACKAGE using zypper..."
            zypper search $PACKAGE
            ;;
        "portage")
            echo "Searching for $PACKAGE using portage..."
            emerge --search $PACKAGE
            ;;
        "xbps")
            echo "Searching for $PACKAGE using xbps..."
            xbps-query -Rs $PACKAGE
            ;;
        "pkg")
            echo "Searching for $PACKAGE using pkg..."
            pkg search $PACKAGE
            ;;
        "pkg_info")
            echo "Searching for $PACKAGE using pkg_info..."
            pkg_info | grep $PACKAGE
            ;;
        "pkgin")
            echo "Searching for $PACKAGE using pkgin..."
            pkgin search $PACKAGE
            ;;
        *)
            echo "Unsupported package manager. Cannot search for $PACKAGE."
            ;;
    esac
}

function update_script() {
    echo "Updating WM-IT..."
    curl -o /tmp/WM-IT.sh https://raw.githubusercontent.com/CowerDawn/WM-IT/main/WM-IT
    if [ $? -eq 0 ]; then
        sudo mv /tmp/WM-IT.sh "$(realpath "$0")"
        sudo chmod +x "$(realpath "$0")"
        echo "WM-IT has been updated. Please restart the script."
        exit 0
    else
        echo "Failed to download the update. Please try again later."
    fi
}
function change_wallpaper_color() {
	CURRENT_COLOR_INDEX=$(( (CURRENT_COLOR_INDEX + 1) % ${#COLORS[@]} )) 
	draw_wallpaper
	draw_menu
}

draw_wallpaper
draw_menu

while true; do
    read -rsn1 input
    case $input in
        "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")
            switch_workspace $input
            ;;
        "d")
            echo "Enter program name to open:"
            read PROGRAM
            open_program $PROGRAM
            ;;
        "s")
            read -p "Enter program name to close:" answer
	    killall "$answer"
	    # I hate Jello
            ;;
        "i")
            echo "Enter package name to install:"
            read PACKAGE
            install_package $PACKAGE
            ;;
        "r")
            echo "Enter package name to remove:"
            read PACKAGE
            remove_package $PACKAGE
            ;;
        "h")
            show_help
            ;;
        "")
            read -rsn1 -t 0.1 input
            if [[ $input == "" ]]; then
                open_command_line
            fi
            ;;
        "-")
            shutdown_pc
            ;;
        "b")
            reboot_pc
            ;;
        "c")
            clear 
            ;;
        "q")
            echo "Exiting WM-IT..."
            exit 0
            ;;
        "e")
            echo "To exit the shell, type the command exitshell"
            shell
            ;;
        "p")
            show_processes
            ;;
        "t")
            show_system_info
            ;;
        "n")
            network_manager
            ;;
        "a")
            audio_manager
            ;;
        "g")
            search_package
            ;;
    "y")
	    clear_system
	    ;;
    "x")
        update_script
        ;;
"u")
	change_wallpaper_color
    esac
    draw_menu
done
