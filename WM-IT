#!/bin/bash

WORKSPACES=("1" "2" "3" "4" "5" "6" "7" "8" "9")
CURRENT_WORKSPACE="1"
PROGRAMS=()
WALLPAPER="WM-IT"

function draw_wallpaper() {
    clear
    echo -e "\e[44m\e[37m"
    echo "                                                                             "
    echo "                                                                             "
    echo "  _    _   _____   __  Welcome to WM-IT!                                     "
    echo " | |  | | |_   _| |  | WM-IT the best!                                       "
    echo " | |__| |   | |   |  | WM-IT github:                                         "
    echo " |  __  |   | |   |__| https://github.com/CowerDawn/WM-IT                    "
    echo " | |  | |  _| |_   __  Creators: CowerDawn,S0siskaKiller                     "
    echo " |_|  |_| |_____| |__| WM-IT - This is a Windows manager inside the terminal!"
    echo "                                                                             "
    echo "                                                                             "
    echo -e "\e[0m"      
}

function draw_menu() {
    echo -e "\e[40m\e[37m"
    echo -e "Workspace: $CURRENT_WORKSPACE | Time: $(date +'%H:%M:%S') | Commands:1-9,E- shell, Q - closes the program, Enter - open some programs,- - shutdown ur pc,I - install some software, R - remove some software, H - help, s - exit from WM-IT. (more in help)\e[0m"
}

function switch_workspace() {
    CURRENT_WORKSPACE=$1
    draw_wallpaper
    draw_menu
}

function open_program() {
    PROGRAM=$1
    PROGRAMS+=("$PROGRAM")
    draw_wallpaper
    draw_menu
    echo "Opening $PROGRAM..."
    $PROGRAM &
}

function close_program() {
    PROGRAM=$1
    for i in "${!PROGRAMS[@]}"; do
        if [[ "${PROGRAMS[$i]}" == "$PROGRAM" ]]; then
            unset 'PROGRAMS[$i]'
            pkill -f "$PROGRAM"
            draw_wallpaper
            draw_menu
            echo "Closed $PROGRAM."
            return
        fi
    done
    echo "Program $PROGRAM not found."
}

function detect_package_manager() {
    if [ -f /etc/debian_version ]; then
        echo "apt"
    elif [ -f /etc/arch-release ]; then
        echo "pacman"
    elif [ -f /etc/fedora-release ]; then
        echo "dnf"
    elif [ -f /etc/redhat-release ]; then
        echo "yum"
    elif [ -f /etc/SuSE-release ]; then
        echo "zypper"
    else
        echo "unknown"
    fi
}

function install_package() {
    PACKAGE=$1
    PM=$(detect_package_manager)
    case $PM in
        "apt")
            echo "Installing $PACKAGE using apt..."
            sudo apt install -y $PACKAGE
            ;;
        "pacman")
            echo "Installing $PACKAGE using pacman..."
            sudo pacman -S --noconfirm $PACKAGE
            ;;
        "dnf")
            echo "Installing $PACKAGE using dnf..."
            sudo dnf install -y $PACKAGE
            ;;
        "yum")
            echo "Installing $PACKAGE using yum..."
            sudo yum install -y $PACKAGE
            ;;
        "zypper")
            echo "Installing $PACKAGE using zypper..."
            sudo zypper install -y $PACKAGE
            ;;
    "pkg_add")
	    echo "Installing $PACKAGE using pkg_add..."
    doas pkg_add $PACKAGE
    ;;
    "pkgin")
	    echo "Installing $PACKAGE using pkgin..."
	    sudo pkgin install $PACKAGE
	    ;;
       "pkg")
	       echo "Installing $PACKAGE using pkg..."
	       sudo pkg install $PACKAGE
	         ;;
        *)
            echo "Unsupported package manager. Cannot install $PACKAGE."
            ;;
    esac
}

function remove_package() {
    PACKAGE=$1
    PM=$(detect_package_manager)
    case $PM in
        "apt")
            echo "Removing $PACKAGE using apt..."
            sudo apt remove -y $PACKAGE
            ;;
        "pacman")
            echo "Removing $PACKAGE using pacman..."
            sudo pacman -Rcs --noconfirm $PACKAGE
            ;;
        "dnf")
            echo "Removing $PACKAGE using dnf..."
            sudo dnf remove -y $PACKAGE
            ;;
        "yum")
            echo "Removing $PACKAGE using yum..."
            sudo yum remove -y $PACKAGE
            ;;
        "zypper")
            echo "Removing $PACKAGE using zypper..."
            sudo zypper remove -y $PACKAGE
            ;;
       "pkg")
	       echo "Removing $PACKAGE using pkg..."
	       sudo pkg delete $PACKAGE
	       ;;
       "pkg_delete")
	       echo "Removing $PACKAGE using pkg_delete..."
               doas pkg_delete $PACKAGE
	       ;;
        *)
            echo "Unsupported package manager. Cannot remove $PACKAGE."
            ;;
    esac
}

function show_help() {
    echo "WM-IT Help:"
    echo "Super + 1-9: Switch workspace"
    echo "Super + d: Open program"
    echo "Super + q: Close program"
    echo "Super + Enter: Open command line"
    echo "Super + -: Shutdown PC"
    echo "Super + b: Reboot PC"
    echo "Super + m: Start X server"
    echo "install [package]: Install package"
    echo "remove [package]: Remove package"
    echo "C - clear the screen"
    echo "help: Show this help"
    
}

function open_command_line() {
    draw_wallpaper
    draw_menu
    echo "Enter command:"
    read -r COMMAND
    eval "$COMMAND"
}

function shutdown_pc() {
    echo "Shutdown PC? (Y/N)"
    read -rsn1 response
    if [[ $response == "Y" || $response == "y" ]]; then
        sudo shutdown now
    else
        echo "Shutdown canceled."
    fi
}

function reboot_pc() {
    echo "Reboot PC? (Y/N)"
    read -rsn1 response
    if [[ $response == "Y" || $response == "y" ]]; then
        sudo reboot
    else
        echo "Reboot canceled."
    fi
}

function start_x_server() {
    echo "Starting X server with startx..."
    startx
}
function shell() {
	while true; do
	read -p " > " SHELL
	eval "$SHELL"
    	if [[ "$SHELL" == "exitshell" ]]; then
        echo "exit from shell"
        draw_wallpaper
	draw_menu
	break
	fi
done
}

draw_wallpaper
draw_menu

while true; do
    read -rsn1 input
    case $input in
        "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9")
            switch_workspace $input
            ;;
        "d")
            echo "Enter program name to open:"
            read PROGRAM
            open_program $PROGRAM
            ;;
        "q")
            read -p "Enter program name to close:" answer
	    killall "$answer"
	    # I hate Jello
            ;;
        "i")
            echo "Enter package name to install:"
            read PACKAGE
            install_package $PACKAGE
            ;;
        "r")
            echo "Enter package name to remove:"
            read PACKAGE
            remove_package $PACKAGE
            ;;
        "h")
            show_help
            ;;
        "")
            read -rsn1 -t 0.1 input
            if [[ $input == "" ]]; then
                open_command_line
            fi
            ;;
        "-")
            shutdown_pc
            ;;
        "b")
            reboot_pc
            ;;
        "m")
            start_x_server
            ;;
    "c")
	    clear 
	    ;;
        "s")
            echo "Exiting WM-IT..."
            exit 0
            ;;
	"e")
		echo "To exit the shell, type the command “exitshell”"
		shell
    esac
    draw_menu
done
